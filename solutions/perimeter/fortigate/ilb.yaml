---
# Health Check
apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: ComputeHealthCheck
metadata:
  name: perimeter-http-8008-hc
  namespace: networking
  annotations:
    cnrm.cloud.google.com/project-id: perimeter-project-id # kpt-set: ${perimeter-project-id}
spec:
  resourceID: http-8008-hc
  location: northamerica-northeast1
  httpHealthCheck:
    port: 8008
  checkIntervalSec: 3
  timeoutSec: 2
  unhealthyThreshold: 3
---
# Backend Service
# resource "google_compute_region_backend_service" "ilb_bes" {
#   provider               = google-beta
#   name                   = "${var.prefix}bes-ilb-trust-${local.region_short}"
#   region                 = var.region
#   network                = data.google_compute_subnetwork.subnets[1].network

#   backend {
#     group                = google_compute_instance_group.fgt-umigs[0].self_link
#   }
#   backend {
#     group                = google_compute_instance_group.fgt-umigs[1].self_link
#   }

#   health_checks          = [google_compute_region_health_check.health_check.self_link]
#   connection_tracking_policy {
#     connection_persistence_on_unhealthy_backends = "NEVER_PERSIST"
#   }
# }
apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: ComputeBackendService
metadata:
  name: perimeter-ilb-bes
  namespace: networking
  annotations:
    cnrm.cloud.google.com/project-id: perimeter-project-id # kpt-set: ${perimeter-project-id}
spec:
  resourceID: ilb-bes
  location: northamerica-northeast1
  networkRef:
    name: perimeter-global-internal-vpc
  backend:
  - group:
      instanceGroupRef:
        name: perimeter-fgt-primary-umig
  - group:
      instanceGroupRef:
        name: perimeter-fgt-secondary-umig
  healthChecks:
  - healthCheckRef:
      name: perimeter-http-8008-hc
  connectionTrackingPolicy:
    connectionPersistenceOnUnhealthyBackends: "NEVER_PERSIST"
---
# Forwarding Rule
#   resource "google_compute_forwarding_rule" "ilb_fwd_rule" {
#   name                   = "${var.prefix}fwdrule-ilb-trust-${local.region_short}"
#   region                 = var.region
#   network                = data.google_compute_subnetwork.subnets[1].network
#   subnetwork             = data.google_compute_subnetwork.subnets[1].id
#   ip_address             = google_compute_address.ilb.address
#   all_ports              = true
#   load_balancing_scheme  = "INTERNAL"
#   backend_service        = google_compute_region_backend_service.ilb_bes.self_link
#   allow_global_access    = true
# }
apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: ComputeForwardingRule
metadata:
  name: perimeter-ilb-fwdrule
  namespace: networking
  annotations:
    cnrm.cloud.google.com/project-id: perimeter-project-id # kpt-set: ${perimeter-project-id}
spec:
  resourceID: ilb-fwdrule
  location: northamerica-northeast1
  networkRef:
    name: perimeter-global-internal-vpc
  subnetworkRef:
    name: perimeter-nane1-internal-paz-snet
  ipAddress:
    addressRef:
      name: perimeter-ilb-address
  allPorts: true
  loadBalancingScheme: "INTERNAL"
  backendServiceRef:
    name: perimeter-ilb-bes
  allowGlobalAccess: true
---
# Explicit proxy
apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: ComputeForwardingRule
metadata:
  name: perimeter-ilb-proxy-fwdrule
  namespace: networking
  annotations:
    cnrm.cloud.google.com/project-id: perimeter-project-id # kpt-set: ${perimeter-project-id}
spec:
  resourceID: ilb-proxy-fwdrule
  location: northamerica-northeast1
  networkRef:
    name: perimeter-global-internal-vpc
  subnetworkRef:
    name: perimeter-nane1-internal-paz-snet
  ipAddress:
    addressRef:
      name: perimeter-ilb-proxy-address
  ports:
  - "8080"
  loadBalancingScheme: "INTERNAL"
  backendServiceRef:
    name: perimeter-ilb-bes
  allowGlobalAccess: true